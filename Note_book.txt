##### raspberrypi4 Audio setup
###########################################################################################################################

arecord -l

nano ~/.asoundrc

pcm.capture {
    type plug
    slave {
        pcm "hw:3,0"
        rate 16000
        format S16_LE
        channels 1
    }
}

sudo nano /etc/asound.conf
pcm.!default {
    type plug
    slave.pcm "plughw:3,0"
}
###########################################################################################################################









##### github setup
###########################################################################################################################

# create a new repository on the command line

echo "# Speechy_windows" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Sara-Meriem-Abdelhafid/Speechy_windows.git
git push -u origin main

#…or push an existing repository from the command line

git remote add origin https://github.com/Sara-Meriem-Abdelhafid/Speechy_windows.git
git branch -M main
git push -u origin main


#If the origin remote is incorrect or outdated, you can update it:
git remote set-url origin https://github.com/Sara-Meriem-Abdelhafid/Speechy_windows.git


#If you want to completely reset the origin, remove it and then add it again:
git remote remove origin

git remote add origin https://github.com/Sara-Meriem-Abdelhafid/Speechy_windows.git


#Verify the Changes
git remote -v

#Large Files: If you have files larger than 100MB, Git will reject them. Use Git LFS for large files.
git lfs install
git lfs track "*.largefileextension"
git init
git add .
git commit -m "Initial commit with folders"
git remote add origin https://github.com/Sara-Meriem-Abdelhafid/Speechy_windows.git
git push -u origin main
git push -u origin master

git rm -r --cached Software/IA/text_to_speech/fastText
git commit -m "Update .gitignore and stop tracking fastText folder"
git check-ignore -v Software/IA/text_to_speech/fastText

#Correct Command in PowerShell
Get-ChildItem -Force
Get-ChildItem -Force | Where-Object { $_.Name -eq '.gitignore' }


#warning: in the working copy of 'Software/IA/text_to_speech/text_in_out/speech_to_text_output_file.txt', LF will be replaced by CRLF the next time Git touches it
'''
The warning you’re seeing is related to line endings in text files, which can differ between operating systems:

LF (Line Feed): Used by Unix-based systems like Linux and macOS.
CRLF (Carriage Return + Line Feed): Used by Windows.
Git automatically handles line-ending conversions when files are checked out or committed to ensure compatibility across different platforms.
'''


git commit -m "Update Note_book.txt"
###########################################################################################################################


####Raspberry Pi Set_Up
###########################################################################################################################

raspberrypi4.local

ping raspberrypi4.local
ssh -l pi raspberrypi4.local
ssh-keygen -f ~/.ssh/known_hosts # for mac
ssh-keygen -R raspberrypi4.local # for windows
ssh pi@raspberrypi4.local 
hostname: pi
password: raspberry

Network: MyNetwork
Password : abdelhafid2023A@abd

/Volumes/boot
vim wpa__supplicant.conf  
  
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=DZ

network={
    ssid="MyNetwork"
    psk="abdelhafid2023A@abd"
}

touch ssh
touch /Volumes/bootfs/ssh     

sudo vim /etc/hosts 
ssh-keygen -f ~/.ssh/known_hosts  
vim wpa__supplicant.conf   
cd /Volumes/bootfs   
###########################################################################################################################

source env/bin/activate 
cd /home/pi/Project/Main_Code 
python main.py

###########################################################################################################################

#####github 
###########################################################################################################################

git init

git remote -v 
rm -rf .git
git init
git add Notes.txt 
git commit -m "add Notes.txt "
git remote add origin https://github.com/Sara-Meriem-Abdelhafid/Speechy_From_Mac.git
git push -u origin main
git branch  
git push -u origin master
git pull origin main  
git status
git pull origin master
git push origin master --force
git fetch origin
git rebase origin/master
git status 
git rebase --continue
git add Software/IA
git status 

###########################################################################################################################
Here are some other signs you may see in VS Code's Source Control view and their meanings:

A (Added): The file is newly added and staged for a commit.
D (Deleted): The file has been deleted and is staged for a commit.
U (Untracked): The file is new, untracked by Git, and not staged for a commit.
R (Renamed): The file has been renamed and is staged for a commit.
C (Copied): The file has been copied to a new location and is staged for a commit.
? (Untracked): The file is not tracked by Git (similar to U).
M (Modified): The file has been edited in your working directory but has not yet been staged for a commit.
###########################################################################################################################



git config --global user.email "sara23.abdelhafid@google.com"
git config --global user.name "Sara-Meriem-Abdelhafid"
Username for 'https://github.com': Sara-Meriem-Abdelhafid

sarasara2024A#
sarasara2020A#, 
sarasara2020A
Password for 'https://Sara-Meriem-Abdelhafid@github.com':
git config --global credential.helper store
ssh-keygen -t ed25519 -C "sara23.abdelhafid@google.com"





github 

git remote -v
rm -rf .git
git branch  
git restore --staged Software/IA



git init
git add Notes.txt 
git commit -m "add Notes.txt "
git remote add origin https://github.com/Sara-Meriem-Abdelhafid/Speechy_From_Mac.git
git push -u origin main
git push -u origin master
git push origin master --force

git pull origin main  


#Install Git LFS:
sudo apt install git-lfs
git lfs install


Track the large file:
git lfs track "text_to_speech/lid.176.bin"
git lfs track "*.file_extension"
git commit -m "Track large files with Git LFS"
git rm --cached path/to/large-file

#Add the .gitattributes file created by Git LFS:
git add .gitattributes text_to_speech/lid.176.bin
git commit -m "Remove large files"
git push origin master


git fetch origin
git rebase origin/master
git status 
git rebase --continue
git add Software/IA
git status 


git add -A
git commit -m "Describe the changes you made here"

nano .gitignore
Software/IA/*.tmp
Software/IA/*.bin
git add .gitignore
git commit -m "Update .gitignore to exclude unnecessary files"
git status



rm -rf .git
git init
git status
git add Note_book.txt
git commit -m "add Note_book.txt"
git remote add origin https://github.com/Sara-Meriem-Abdelhafid/Speechy_From_Mac.git
git remote set-url origin https://github.com/Sara-Meriem-Abdelhafid/Speechy_From_Mac.git

git pull origin master  
git push -u origin master
git push origin master --force


git remote -v 

git branch  


# Install Git LFS:
sudo apt install git-lfs
git lfs install

Track the large file:
git lfs track "text_to_speech/lid.176.bin"

Add the .gitattributes file created by Git LFS:
git add .gitattributes text_to_speech/lid.176.bin
git commit -m "Track large file with Git LFS"

Push your changes:
git push origin master


git add -A
git commit -m "Describe the changes you made here"


nano .gitignore
Software/IA/*.tmp
Software/IA/*.bin
git add .gitignore
git commit -m "Update .gitignore to exclude unnecessary files"
git status

git commit --amend --no-edit # After removing the secret, update the commit history to remove the secret completely:

bash
Copier le code



'''
fatal: refusing to merge unrelated histories:
1-> You can force Git to merge unrelated histories by using the --allow-unrelated-histories flag.
git pull origin master --allow-unrelated-histories

2->
git pull
git merge

->Set Upstream Branch  (Run the following command to link your local master branch to the remote master branch):
git branch --set-upstream-to=origin/master master
This tells Git that your local master branch should track the master branch on the origin remote.

->Pull the Changes
git pull
or:
git pull origin master --set-upstream
git pull origin master --allow-unrelated-histories

-> To change the Branch name from Master to main
git branch
git branch -M main
git push --set-upstream origin main

-> If you want to discard all changes to Software/IA in your working directory (reset it to its last committed state): git restore Software/IA
-> If you want to unstage changes in Software/IA that were added to the staging area: git restore --staged Software/IA
-> If you only want to see what changes have been made in Software/IA: git diff Software/IA





echo "# test_repo" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Sara-Meriem-Abdelhafid/Speechy_From_Mac.git
git push -u origin main

python3 -m pip install --upgrade pip  
pip3 --version 
pip --version 
pip install git-filter-repo  
git --version #git version 2.15.0

-> Update Git version from 2.15 -> 2.22
#for raspberry
sudo apt update
sudo apt install git
git --version
Install Git from Source (if required): sudo apt install build-essential libssl-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip

wget https://github.com/git/git/archive/refs/tags/v2.42.0.zip -O git.zip
unzip git.zip
cd git-2.42.0
make configure
./configure --prefix=/usr
make all
sudo make install
git --version


#for mac
brew update 
brew install git

#for windows
Download the Latest Git Installer: Go to git-scm.com and download the latest version.
Install Git: Run the installer and follow the setup instructions.
Verify the Installation: Open Command Prompt or Git Bash and run 
git --version



Rewrite history to remove sensitive data from Notes.txt:
git filter-repo --path Notes.txt --replace-text <(echo "s/<your-secret>/REDACTED/") #needs Error: need git >= 2.22.0




for the drive 
###########################################################################################################################
list all
sudo fdisk -l

to repartition it 
sudo fdisk /dev/sda 
# /dev/sda geted from the filesystem disck list 

create filesystem
sudo mkfs -t ext4 /dev/sda1 # to create a file system in SSD_256_gb 
sudo mkfs -t ext4 /dev/mmcblk0p1 # to create a file system in sdcard adata_32_gb


lsblk  # show disks monted 
sudo mkdir /mnt # to create file mnt to monte in it the drives

sudo mkdir /mnt/hd1 # to create space to monte the hard drive 1 adata_32_gb
sudo chown pi:pi /mnt/hd1 # to change who owns it user_name:pi and the root:/mnt/hd1
sudo mkdir /mnt/hd2 #to create space to monte the hard drive 2 SSD_256_gb
sudo chown pi:pi /mnt/hd2 # to change who owns it user_name:pi and the root:/mnt/hd2

-> sudo blkid # to tell the lunix (Raspberry Pi 4) that it have 2 drives but one for boot and other for store 
-> it shows:
/dev/sdb2: LABEL="rootfs" UUID="a36be96c-66be-4487-a7a6-0481bca99d89" BLOCK_SIZE="4096" TYPE="ext4" PARTUUID="bb549dc2-02"
/dev/sdb1: LABEL_FATBOOT="bootfs" LABEL="bootfs" UUID="5DC7-F115" BLOCK_SIZE="512" TYPE="vfat" PARTUUID="bb549dc2-01"
/dev/mmcblk0p1: UUID="55fd03b9-044a-4568-85aa-a951804e8dff" BLOCK_SIZE="4096" TYPE="ext4"
/dev/sda1: UUID="8fc1b2f2-373d-40b8-8fd6-e2e36c171b35" BLOCK_SIZE="4096" TYPE="ext4" PARTUUID="84df0a2e-fe45-ba4b-b16e-00694c7e2842"

bb549dc2
-> sudo nano /etc/fstab # to tell the raspberry pi what file to mount to boot 
-> it shows :
proc            /proc           proc    defaults          0       0
PARTUUID=bb549dc2-01  /boot/firmware  vfat    defaults          0       2
PARTUUID=bb549dc2-02  /               ext4    defaults,noatime  0       1
# a swapfile is not a swap partition, no line here
#   use  dphys-swapfile swap[on|off]  for that



proc            /proc           proc    defaults          0       0
PARTUUID=bb549dc2-01  /boot/firmware  vfat    defaults          0       2
PARTUUID=bb549dc2-02  /               ext4    defaults,noatime  0       1
UUID=55fd03b9-044a-4568-85aa-a951804e8dff /mnt/hd1 ext4 defaults 0 1
UUID=8fc1b2f2-373d-40b8-8fd6-e2e36c171b35 /mnt/hd2 ext4 defaults 0 1
# a swapfile is not a swap partition, no line here
#   use  dphys-swapfile swap[on|off]  for that

sudo unmount /mnt/hd1 # to unmount the hard disk
sudo rmdir  /mnt/hd1 # to remove the hard disk

###########################################################################################################################


'''
Raspberry Pi

raspberrypi4.local

ping raspberrypi4.local
ssh -l pi raspberrypi4.local
ssh pi@raspberrypi4.local 
hostname: pi
password: raspberry


nano /Volumes/bootfs/config.txt  
Add :
#Forces the HDMI output to be enabled even if a display is not detected.
hdmi_force_hotplug=1

#Specify the resolution and refresh rate of the HDMI display (hdmi_group=1: Sets the display to CEA mode (used for TVs), hdmi_mode=16: Sets the resolution to 1080p at 60Hz. You can adjust the mode based on your display.):
hdmi_group=1
hdmi_mode=16


#Keep HDMI powered on even when the Raspberry Pi is idle:
hdmi_blanking=1

#If the display still doesn’t work, enable HDMI safe mode:
hdmi_safe=1

#Remove black borders around the screen:
#disable_overscan=1

source env/bin/activate 
cd /home/pi/Project/Main_Code 
python main.py

Network: MyNetwork
Password : abdelhafid2023A@abd

/Volumes/boot
vim wpa__supplicant.conf  
  
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=DZ

network={
    ssid="MyNetwork"
    psk="abdelhafid2023A@abd"
}

touch ssh
touch /Volumes/bootfs/ssh     

sudo vim /etc/hosts 
ssh-keygen -f ~/.ssh/known_hosts  
vim wpa__supplicant.conf   
 cd /Volumes/bootfs   
cd /Volumes/bootfs  




arecord -l

nano ~/.asoundrc

pcm.capture {
    type plug
    slave {
        pcm "hw:3,0"
        rate 16000
        format S16_LE
        channels 1
    }
}

sudo nano /etc/asound.conf
pcm.!default {
    type plug
    slave.pcm "plughw:3,0"
}

source env/bin/activate
sudo apt-get update
sudo apt-get install python3-venv  # Install venv module for Python 3
python3 -m venv env
source env/bin/activate

pip install langid
pip install scikit-learn
sudo apt-get install portaudio19-dev python3-pyaudio
pip install pyaudio
pip install fasttext
pip install playsound
pip install gtts
pip install librosa
pip install matplotlib
pip install langdetect
pip install pydub
pip install pyttsx3
pip install pyttsx4
pip install speechrecognition
pip install SpeechRecognition
pip install translate
pip install ipython
pip install transformers
wget https://dl.fbaipublicfiles.com/fasttext/supervised-models/lid.176.bin
pip install pygobject
sudo apt-get update
sudo apt-get install python3-gst-1.0



git init
git add .
git commit -am " new commit"
git config --global user.email "sara23.abdelhafid@google.com"
git config --global user.name "Sara from windows"
git config --global user.name "Sara"

git push origin master 
wget https://raw.githubusercontent.com/Sara-Meriem-Abdelhafid/New_Speechy_Source_Code/main/test_mic.py
git remote add origin https://github.com/Sara-Meriem-Abdelhafid/New_Speechy_Source_Code.git
git push origin windows


review the commit history on both branches:
For the local branch:
git log --oneline


For the remote branch:
git fetch
git log origin/main --oneline


->Before syncing changes, make sure you're on the correct branch:
git branch 

->If you're not on the desired branch (e.g., main), switch to it: 
git checkout main

->Fetch Updates From Remote repository without applying them to your working directory:
git fetch 

-> Compare Local and Remote Branches 
git status 
# If you see "Your branch is behind", it means there are new changes on GitHub that you haven’t pulled yet.
#If you see "Your branch is ahead", it means you have local commits that haven’t been pushed yet
  
git pull origin main #If the remote branch has new changes, pull them to your local branch

git push origin main #If your local branch has changes that need to be synced to GitHub, push them


--> Automate the Process

nano sync_project.sh

->Add
''' #!/bin/bash

# Navigate to your project directory
# cd /path/to/your/project
cd /Users/saraabdelhafid/Desktop/Speechy_Source_Code/Source\ Code/Speechy_Robot_mac
# Check current branch
echo "Checking current branch..."
git branch

# Fetch updates from remote
echo "Fetching updates from GitHub..."
git fetch

# Check status
echo "Checking status..."
git status

# Pull changes if necessary
echo "Pulling changes (if any)..."
git pull origin main

# Notify user
echo "Your project is up to date!"
'''
chmod +x sync_project.sh #Make the Script Executable 
./sync_project.sh #Run the Script
cd /path/to/your/project && git pull origin main
cd /Users/saraabdelhafid/Desktop/Speechy_Source_Code/Source\ Code/Speechy_Robot_mac && git pull origin main


